package com.priyanka.yadav.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.priyanka.yadav.models.Order;
import com.spring.rest.repositories.OrderRepository;

@RestController
@RequestMapping("/order")
public class OrderController {

	@Autowired
	OrderRepository orepo;
	
	@PostMapping("/addData")
	public void addData() {
		orepo.save(new Order("100","1",400.76));
		orepo.save(new Order("101","2",600.80));
		orepo.save(new Order("102","3",200.76));
		orepo.save(new Order("100","4",890.76));
		orepo.save(new Order("102","5",200.76));
		orepo.save(new Order("100","6",900.76));
		orepo.save(new Order("100","7",4500));
		System.out.println("DATA ADDED TO DATABASE.....");
	}
	
	@PostMapping("/placeOrder/{userid}/{amt}")
	public String placeOrder(@PathVariable("userid") String userId, @PathVariable("amt") double amount) {
		orepo.save(new Order(userId, amount));
		return "Order PLaced!";
	}
	
	
	@PutMapping("/updateOrder/{orderid}/{amt}")
	public String uppdateOrder(@PathVariable("orderid") String orderId, @PathVariable("amt") double amount) {
		Order orderToUpdate = orepo.getOrderByOrderId(orderId);
		if(orderToUpdate != null) {
			orderToUpdate.setAmount(amount);
			orepo.save(orderToUpdate);
			return "Order Updated!";
		} else {
			return "Order Not Updated!";
		}
		
		
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.spring.rest.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document("Order")
public class Order {
	private String userId;
	@Id
	private String orderId;
	private double amount;

	public Order(String userId, String orderId, double amount) {
		super();
		this.userId = userId;
		this.orderId = orderId;
		this.amount = amount;
	}

	public Order(String userId, double amount) {
		super();
		this.userId = userId;
		this.amount = amount;
	}
	
	public Order() {
	}

	@Override
	public String toString() {
		return "Order [userId=" + userId + ", orderId=" + orderId + ", amount=" + amount + "]";
	}

	public String getUserId() {
		return userId;
	}

	public String getOrderId() {
		return orderId;
	}

	public double getAmount() {
		return amount;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}

	public void setAmount(double amount) {
		this.amount = amount;
	}

}
--------------------------------------------------------------------------------------------------------------------------------------
package com.spring.rest.repositories;

import java.util.Optional;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;

import com.spring.rest.models.Order;

public interface OrderRepository extends MongoRepository<Order, String> {

	@Query("{_id=?0}")
	Order getOrderByOrderId(String id);

}
----------------------------------------------------------------------------------------------------------------------------------------
package com.spring.rest;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestUserOrdersApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestUserOrdersApplication.class, args);
		System.out.println("App started...");
	}

}
----------------------------------------------------------------------------------------------------------------------------------------
package com.spring.rest;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

public class ServletInitializer extends SpringBootServletInitializer {

	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(RestUserOrdersApplication.class);
	}

}